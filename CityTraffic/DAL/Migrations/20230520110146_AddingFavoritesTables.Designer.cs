// <auto-generated />
using CityTraffic.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CityTraffic.DAL.Migrations
{
    [DbContext(typeof(CityTrafficDB))]
    [Migration("20230520110146_AddingFavoritesTables")]
    partial class AddingFavoritesTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("CityTraffic.Models.Entities.FavoritesStoppoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("StoppointId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stoppoint_id");

                    b.HasKey("Id");

                    b.HasIndex("StoppointId")
                        .IsUnique();

                    b.ToTable("FavoritesStoppoints");
                });

            modelBuilder.Entity("CityTraffic.Models.Entities.FavoritesTransportRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("TransportRouteId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("transport_route_id");

                    b.HasKey("Id");

                    b.HasIndex("TransportRouteId")
                        .IsUnique();

                    b.ToTable("FavoritesTransportRoutes");
                });

            modelBuilder.Entity("CityTraffic.Models.Entities.Stoppoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT")
                        .HasColumnName("location");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT")
                        .HasColumnName("note");

                    b.Property<int>("StoppointId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stoppoint_id");

                    b.Property<string>("StoppointName")
                        .HasColumnType("TEXT")
                        .HasColumnName("stoppoint_name");

                    b.HasKey("Id");

                    b.ToTable("Stoppoints");
                });

            modelBuilder.Entity("CityTraffic.Models.Entities.TransportRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("RouteId")
                        .HasColumnType("TEXT")
                        .HasColumnName("route_id");

                    b.Property<string>("RouteNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("route_number");

                    b.Property<int>("RouteTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("route_type_id");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("TransportRoutes");
                });

            modelBuilder.Entity("CityTraffic.Models.Entities.FavoritesStoppoint", b =>
                {
                    b.HasOne("CityTraffic.Models.Entities.Stoppoint", "Stoppoint")
                        .WithOne("FavoritesStoppoint")
                        .HasForeignKey("CityTraffic.Models.Entities.FavoritesStoppoint", "StoppointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stoppoint");
                });

            modelBuilder.Entity("CityTraffic.Models.Entities.FavoritesTransportRoute", b =>
                {
                    b.HasOne("CityTraffic.Models.Entities.TransportRoute", "TransportRoute")
                        .WithOne("FavoritesTransportRoute")
                        .HasForeignKey("CityTraffic.Models.Entities.FavoritesTransportRoute", "TransportRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportRoute");
                });

            modelBuilder.Entity("CityTraffic.Models.Entities.Stoppoint", b =>
                {
                    b.Navigation("FavoritesStoppoint");
                });

            modelBuilder.Entity("CityTraffic.Models.Entities.TransportRoute", b =>
                {
                    b.Navigation("FavoritesTransportRoute");
                });
#pragma warning restore 612, 618
        }
    }
}
